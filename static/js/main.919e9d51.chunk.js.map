{"version":3,"sources":["store/actions/ChatActions.ts","hooks/useTypedSelector.tsx","components/chats-list/SearchInput.tsx","components/UI/Modal.tsx","components/modal-input/ModalInput.tsx","components/chats-list/ChatsList.tsx","components/main-chat/ChatInput.tsx","components/main-chat/MainChat.tsx","App.tsx","helpers/helpers.ts","store/reducers/ChatReducer.ts","store/index.ts","index.tsx"],"names":["PUBLIC","GROUPS","PRIVATE","USERS","SEND_MESSAGE","UPDATE_CHAT","CHANGE_CHAT","CREATE_NEW_GROUP","START_PRIVATE_CHAT","ADD_USER","REMOVE_USER","CHANGE_USERNAME","useTypedSelector","useSelector","Input","styled","input","SearchInput","placeholder","onUserInput","inputRef","useRef","type","ref","onChange","current","value","Backdrop","div","ModalOverlay","Modal","children","onClose","createPortal","onClick","document","getElementById","Button","button","ModalInput","changeType","btnText","dispatch","useDispatch","trim","groupName","newUsername","StyledChatsList","ChatsSection","ChatGroup","ul","ChatsList","state","chat","username","user","reducerChatGroups","chatGroups","reducerPrivateChats","privateChats","onlineUsers","useState","showNewGroupModal","setShowNewGroupModal","showNameChangeModal","setShowNameChangeModal","chatGroupsFilter","setGroupsFilter","privateChatsFilter","setPrivateChatsFilter","changeChatHandler","chatName","chatType","changeChat","startPrivateChatHandler","startPrivateChat","toggleGroupModalHandler","prevstate","toggleNameModalHandler","filter","group","name","toLowerCase","startsWith","members","otherOnlineUsers","currentPrivateChats","includes","length","map","toString","Form","form","textarea","ChatName","span","ChatInput","currentChatName","currentChat","userInputRef","onSubmit","e","preventDefault","message","timestamp","Date","id","getTime","author","date","toLocaleTimeString","text","alert","ChatContanier","section","MessageBubble","li","props","MessageInfo","MessagesList","MainChat","currentChatMessages","LayoutContainer","ChatContainer","App","useEffect","storageChangeHandler","updatedChat","newValue","key","JSON","parse","removeUsernameHandler","window","addEventListener","removeEventListener","getStorageItem","item","localStorage","getItem","rug","require","existingUsername","sessionStorage","randomUsername","generate","setItem","storagePublicChat","storageChatGroups","storagePrivateChats","storageOnlineUsers","initialChatGroups","stringify","initialState","publicChat","rootReducer","combineReducers","action","concat","groupChatIndex","findIndex","groupChat","updatedGroupChat","updatedGroups","chatIndex","privateChat","updatedPrivateChat","updatedPrivateChats","updatedPublicChat","updatedChatGroups","updatedOnlineUsers","nameChanged","updatedCurrentChat","existingChatIndex","find","newPrivateChat","i","updatedMembers","store","createStore","ReactDOM","render"],"mappings":"0NAMaA,EAAS,SACTC,EAAS,SACTC,EAAU,UACVC,EAAQ,QAORC,EAAe,eAEfC,EAAc,cACdC,EAAc,cACdC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAW,WACXC,EAAc,cACdC,EAAkB,kB,eCrBlBC,EAAoDC,I,OCA3DC,EAAQC,IAAOC,MAAV,+IA8BIC,EAjBK,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,YAC5BC,EAAWC,iBAAyB,MAM1C,OACE,cAACP,EAAD,CACEQ,KAAK,OACLC,IAAKH,EACLI,SARuB,WACzBL,EAAYC,EAASK,QAASC,QAQ5BR,YAAaA,KCxBbS,EAAWZ,IAAOa,IAAV,qKASRC,EAAed,IAAOa,IAAV,2MA+BHE,EAfD,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,QACzB,OACE,eAAC,WAAD,WACGC,uBACC,cAACN,EAAD,CAAUO,QAASF,IACnBG,SAASC,eAAe,aAEzBH,uBACC,cAACJ,EAAD,UAAeE,IACfI,SAASC,eAAe,iBC5B1BtB,EAAQC,IAAOC,MAAV,sKAQLqB,EAAStB,IAAOuB,OAAV,0OAgDGC,EA3BI,SAAC,GAKI,IAJtBP,EAIqB,EAJrBA,QACAQ,EAGqB,EAHrBA,WACAtB,EAEqB,EAFrBA,YACAuB,EACqB,EADrBA,QAEMC,EAAWC,cACXvB,EAAWC,iBAAyB,MAY1C,OACE,eAAC,EAAD,CAAOW,QAASA,EAAhB,UACE,cAAC,EAAD,CAAOT,IAAKH,EAAUE,KAAK,OAAOJ,YAAaA,IAC/C,cAACmB,EAAD,CAAQH,QAbY,WAAO,IAAD,EACtBlB,GAAQ,UAAAI,EAASK,eAAT,eAAkBC,QAAS,GACpB,KAAjBV,EAAM4B,SAES,UAAfJ,GAAwBE,EJNvB,CAAEpB,KAAMf,EAAkBsC,UIMqB7B,IACjC,SAAfwB,GAAuBE,EJQtB,CAAEpB,KAAMX,EAAiBmC,YIRqB9B,IAEnDgB,MAME,SAAmCS,QChDnCM,EAAkBhC,IAAOa,IAAV,8QAgBfoB,EAAejC,IAAOa,IAAV,kPAeZqB,EAAYlC,IAAOmC,GAAV,gIASTb,GAAStB,IAAOuB,OAAV,gRAyKGa,GAzJG,WAChB,MAKIvC,GAAiB,SAACwC,GAAD,OAAWA,EAAMC,QAJ9BC,EADR,EACEC,KACYC,EAFd,EAEEC,WACcC,EAHhB,EAGEC,aACAC,EAJF,EAIEA,YAEIlB,EAAWC,cAEjB,EAAkDkB,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAsDF,oBAAS,GAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAA4CJ,mBAAS,IAArD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAoDN,mBAAS,IAA7D,mBAAOO,EAAP,KAA2BC,EAA3B,KAEMC,EAAoB,SAAChD,EAAyBiD,GAClD7B,EL3CsB,SAAC8B,EAA6BD,GACtD,MAAO,CAAEjD,KAAMhB,EAAakE,WAAUD,SAAUA,GK0CrCE,CAAWnD,EAAMiD,KAGtBG,EAA0B,SAACpB,GAC/BZ,ELvC4B,SAACY,GAC/B,MAAO,CAAEhC,KAAMd,EAAoB8C,YKsCxBqB,CAAiBrB,KAUtBsB,EAA0B,WAC9Bb,GAAqB,SAACc,GAAD,OAAgBA,MAEjCC,EAAyB,WAC7Bb,GAAuB,SAACY,GAAD,OAAgBA,MAGnCpB,EAAaD,EAAkBuB,QAAO,SAACC,GAAD,OAC1CA,EAAMC,KAAKC,cAAcC,WAAWjB,MAEhCP,EAAeD,EAAoBqB,QAAO,SAAC1B,GAG/C,OADEA,EAAK+B,QAAQ,KAAO9B,EAAWD,EAAK+B,QAAQ,GAAK/B,EAAK+B,QAAQ,IAC7CD,WAAWf,MAG1BiB,EAAmBzB,EAAYmB,QAAO,SAACxB,GAAD,OAAUA,IAASD,KACzDgC,EAAsB3B,EAAaoB,QAAO,SAAC1B,GAAD,OAC9CA,EAAK+B,QAAQG,SAASjC,MAGxB,OACE,eAACP,EAAD,WACE,wCAAWO,KACX,cAAC,GAAD,CAAQpB,QAAS4C,EAAjB,6BAEA,cAAC9B,EAAD,UACE,oBAAId,QAAS,kBAAMoC,EAAkB,SAAU,KAA/C,sBAGF,eAACtB,EAAD,WACE,wCACA,cAAC,EAAD,CACE9B,YAAY,eACZC,YAzCoB,SAACH,GAC3BmD,EAAgBnD,EAAMkE,kBA2CjBzB,EAAW+B,OAAS,GACnB,cAACvC,EAAD,UACGQ,EAAWgC,KAAI,SAACT,GAAD,OACd,oBAEE9C,QAAS,kBAAMoC,EAAkB,SAAUU,EAAMC,OAFnD,SAIGD,EAAMC,MAHFD,EAAMC,WAQI,IAAtBxB,EAAW+B,QAAgB,sDAE5B,cAAC,GAAD,CAAQtD,QAAS0C,EAAjB,mCAGF,eAAC5B,EAAD,WACE,+CACA,cAAC,EAAD,CACE9B,YAAY,sBACZC,YA9DyB,SAACH,GAChCqD,EAAsBrD,EAAMkE,kBAgEvBI,EAAoBE,OAAS,GAC5B,cAACvC,EAAD,UACGqC,EAAoBG,KAAI,SAACT,GAAD,OACvB,oBAEE9C,QAAS,kBACPoC,EACE,UACAU,EAAMI,QAAQ,KAAO9B,EACjB0B,EAAMI,QAAQ,GACdJ,EAAMI,QAAQ,KAPxB,SAWGJ,EAAMI,QAAQ,KAAO9B,EAClB0B,EAAMI,QAAQ,GACdJ,EAAMI,QAAQ,IAZbJ,EAAMI,QAAQM,iBAiBK,IAA/BJ,EAAoBE,QACnB,qEAIJ,eAACxC,EAAD,WACE,+CACCqC,EAAiBG,OAAS,GACzB,6BACGH,EAAiBI,KAAI,SAAClC,GAAD,OACpB,oBAEErB,QAAS,kBAAMwC,EAAwBnB,IAFzC,SAIGA,GAJH,aACaA,SAQU,IAA5B8B,EAAiBG,QAAgB,2DAGnC1B,GACC,cAAC,EAAD,CACEtB,WAAW,QACXR,QAAS4C,EACT1D,YAAY,yBACZuB,QAAQ,iBAGXuB,GACC,cAAC,EAAD,CACExB,WAAW,OACXR,QAAS8C,EACT5D,YAAY,uBACZuB,QAAQ,wBCjNZkD,GAAO5E,IAAO6E,KAAV,wHAMJ9E,GAAQC,IAAO8E,SAAV,+LAYLxD,GAAStB,IAAOuB,OAAV,+SAiBNwD,GAAW/E,IAAOgF,KAAV,sHAmDCC,GA3CG,WAChB,MAIIpF,GAAiB,SAACwC,GAAD,OAAWA,EAAMC,QAHpCE,EADF,EACEA,KACiBgB,EAFnB,EAEE0B,gBACAC,EAHF,EAGEA,YAEIxD,EAAWC,cACXwD,EAAe9E,iBAA4B,MAuBjD,OACE,eAACsE,GAAD,CAAMS,SAtBoC,SAACC,GAAO,IAAD,EACjDA,EAAEC,iBACF,IAAMtF,EAAK,UAAGmF,EAAa1E,eAAhB,aAAG,EAAsBC,MAEpC,GAAKV,GAAiC,IAAxBA,EAAM4B,OAAO4C,OAA3B,CAKA,INzCwBe,EMyClBC,EAAY,IAAIC,KACtB/D,GN1CwB6D,EM2CV,CACVG,GAAIF,EAAUG,UAAYpD,EAC1BqD,OAAQrD,EACRsD,KAAML,EAAUM,qBAChBC,KAAM/F,GN9CL,CAAEM,KAAMlB,EAAcmG,aMiD3BJ,EAAa1E,QAAQC,MAAQ,QAb3BsF,MAAM,8BAiBR,UACE,cAAC,GAAD,CAAOzF,IAAK4E,EAAcjF,YAAY,mBACtC,cAAC,GAAD,CAAQI,KAAK,SAAb,kBAEA,eAACwE,GAAD,WACGI,EACA3B,EAAQ,YAAQA,GAAa,UC/EhC0C,GAAgBlG,IAAOmG,QAAV,4WAqBbC,GAAgBpG,IAAOqG,GAAV,6PAIH,SAACC,GAAD,OAAYA,EAAMT,OAAS,QAAU,UAU/CU,GAAcvG,IAAOgF,KAAV,4KAQN,SAACsB,GAAD,OAAYA,EAAMT,OAAS,MAAQ,UAGxCW,GAAexG,IAAOmC,GAAV,mFAoCHsE,GA9BE,WACf,IAAMnE,EAAOzC,GAAiB,SAACwC,GAAD,OAAWA,EAAMC,KAAKoE,uBAC9CnE,EAAW1C,GAAiB,SAACwC,GAAD,OAAWA,EAAMC,KAAKE,QAExD,OACE,eAAC0D,GAAD,WACG5D,EAAKmC,OAAS,GACb,cAAC+B,GAAD,UACGlE,EAAKoC,KAAI,SAACc,GAAD,OACR,cAACY,GAAD,CACEP,OAAQL,EAAQK,SAAWtD,EAD7B,SAIE,iCACGiD,EAAQQ,KACT,eAACO,GAAD,CAAaV,OAAQL,EAAQK,SAAWtD,EAAxC,UACGiD,EAAQK,SAAWtD,EAAW,MAAQiD,EAAQK,OADjD,KAC2D,IACxDL,EAAQM,YANRN,EAAQG,SAcJ,IAAhBrD,EAAKmC,QAAgB,2EC3EtBkC,GAAkB3G,IAAOa,IAAV,gEAIf+F,GAAgB5G,IAAOa,IAAV,6CAwCJgG,OApCf,WACE,IAAMlF,EAAWC,cAuBjB,OArBAkF,qBAAU,WACRnF,ERiCK,CAAEpB,KAAMb,IQ/Bb,IAAMqH,EAAuB,SAACzB,GAC5B,IRWJ/E,EACAyG,EQZUC,EAAW3B,EAAE2B,SACnBtF,GRUJpB,EQVwB+E,EAAE4B,IRW1BF,EQXgCC,EAAWE,KAAKC,MAAMH,GAAY,GRa3D,CAAE1G,KAAMjB,EAAamE,SAAUlD,EAAMyG,kBQXpCK,EAAwB,SAAC/B,GAC7BA,EAAEC,iBACF5D,ER4BG,CAAEpB,KAAMZ,KQtBb,OAHA2H,OAAOC,iBAAiB,UAAWR,GACnCO,OAAOC,iBAAiB,eAAgBF,GAEjC,WACLC,OAAOE,oBAAoB,UAAWT,GACtCO,OAAOE,oBAAoB,eAAgBH,MAE5C,CAAC1F,IAGF,eAACgF,GAAD,WACE,cAAC,GAAD,IAEA,eAACC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,W,yBC/CKa,GAAiB,SAACP,GAC7B,IAAMQ,EAAOC,aAAaC,QAAQV,GAClC,OAAOQ,EAAOP,KAAKC,MAAMM,GAAQ,IC6C7BG,GAAMC,EAAQ,IACdC,GAAmBC,eAAeJ,QAAQ,YAC5CK,GAAiBF,GAChBA,KACHE,GAAiBJ,GAAIK,WACrBF,eAAeG,QAAQ,WAAYF,KAIrC,IAAMG,GAAoBX,GAAexI,GACnCoJ,GAAoBZ,GAAevI,GACnCoJ,GAAsBb,GAAetI,GACrCoJ,GAAqBd,GAAerI,GAEpCoJ,GAAqC,CACzC,CAAEtE,KAAM,UAAW5B,KAAM,IACzB,CAAE4B,KAAM,UAAW5B,KAAM,IACzB,CAAE4B,KAAM,UAAW5B,KAAM,KAEM,IAA7B+F,GAAkB5D,QACpBkD,aAAaQ,QAAQjJ,EAAQiI,KAAKsB,UAAUD,KAI9C,IAAME,GAAgC,CACpClG,KAAMyF,GACN9C,YAAalG,EACbiG,gBAAiB,GACjByD,WAAYP,GACZ1F,WACE2F,GAAkB5D,OAAS,EAAI4D,GAAoBG,GACrD5F,aAAc0F,GACd5B,oBAAqB0B,GACrBvF,YAAa0F,IC7EFK,GAAcC,aAAgB,CACzCvG,KD+EyB,WAGJ,IAFrBD,EAEoB,uDAFZqG,GACRI,EACoB,uCACpB,GAAIA,EAAOvI,OAASlB,EAAc,CAChC,GAAIgD,EAAM8C,cAAgBlG,EAAQ,CAChC,IAAM+H,EAAc3E,EAAMsG,WAAWI,OAAOD,EAAOtD,SAGnD,OAFAmC,aAAaQ,QAAQlJ,EAAQkI,KAAKsB,UAAUzB,IAErC,6BACF3E,GADL,IAEEsG,WAAY3B,EACZN,oBAAqBM,IAIzB,GAAI3E,EAAM8C,cAAgBjG,EAAQ,CAChC,IAAM8J,EAAiB3G,EAAMK,WAAWuG,WACtC,SAAChF,GAAD,OAAWA,EAAMC,OAAS7B,EAAM6C,mBAE5BgE,EAAY7G,EAAMK,WAAWsG,GAE7BhC,EAAckC,EAAU5G,KAAKyG,OAAOD,EAAOtD,SAC3C2D,EAAgB,6BAAQD,GAAR,IAAmB5G,KAAM0E,IACzCoC,EAAa,aAAO/G,EAAMK,YAKhC,OAJA0G,EAAcJ,GAAkBG,EAEhCxB,aAAaQ,QAAQjJ,EAAQiI,KAAKsB,UAAUW,IAErC,6BACF/G,GADL,IAEEK,WAAY0G,EACZ1C,oBAAqByC,EAAiB7G,OAI1C,GAAID,EAAM8C,cAAgBhG,EAAS,CACjC,IAAMkK,EAAYhH,EAAMO,aAAaqG,WACnC,SAAChF,GAAD,OACEA,EAAMI,QAAQG,SAASnC,EAAM6C,kBAC7BjB,EAAMI,QAAQG,SAASnC,EAAMG,SAE3B8G,EAAcjH,EAAMO,aAAayG,GAEjCrC,EAAcsC,EAAYhH,KAAKyG,OAAOD,EAAOtD,SAC7C+D,EAAkB,6BAAQD,GAAR,IAAqBhH,KAAM0E,IAC7CwC,EAAmB,aAAOnH,EAAMO,cAKtC,OAJA4G,EAAoBH,GAAaE,EAEjC5B,aAAaQ,QAAQhJ,EAASgI,KAAKsB,UAAUe,IAEtC,6BACFnH,GADL,IAEEO,aAAc4G,EACd9C,oBAAqB6C,EAAmBjH,QAK9C,GAAIwG,EAAOvI,OAASjB,EAAa,CAC/B,IAAMmK,EACJX,EAAOrF,WAAaxE,EAAS6J,EAAO9B,YAAc3E,EAAMsG,WACpDe,EACJZ,EAAOrF,WAAavE,EAAS4J,EAAO9B,YAAc3E,EAAMK,WACpD8G,EACJV,EAAOrF,WAAatE,EAAU2J,EAAO9B,YAAc3E,EAAMO,aACrD+G,EACJb,EAAOrF,WAAarE,EAAQ0J,EAAO9B,YAAc3E,EAAMQ,YAErD+G,GAAc,EACdC,EAAqBxH,EAAMqE,oBAC/B,GAAIrE,EAAM8C,cAAgBlG,EACxB4K,EAAqBJ,OAChB,GAAIpH,EAAM8C,cAAgBjG,EAAQ,CACvC,IAAM4K,EAAoBJ,EAAkBT,WAC1C,SAAC3G,GAAD,OAAUA,EAAK4B,OAAS7B,EAAM6C,mBAEhC2E,EAAqBH,EAAkBI,GAAmBxH,UACrD,GAAID,EAAM8C,cAAgBhG,EAAS,CACxC,IAAM2K,EAAoBN,EAAoBP,WAC5C,SAAC3G,GAAD,OACEA,EAAK+B,QAAQG,SAASnC,EAAM6C,kBAC5B5C,EAAK+B,QAAQG,SAASnC,EAAMG,UAEL,IAAvBsH,EACFD,EAAqBL,EAAoBM,GAAmBxH,MAE5DsH,GAAc,EACdC,EAAqBJ,GAIzB,OAAO,6BACFpH,GADL,IAEE8C,YAAayE,EAAc3K,EAASoD,EAAM8C,YAC1CD,gBAAiB0E,EAAc,GAAKvH,EAAM6C,gBAC1CyD,WAAYc,EACZ/G,WAAYgH,EACZ9G,aAAc4G,EACd9C,oBAAqBmD,EACrBhH,YAAa8G,IAIjB,GAAIb,EAAOvI,OAAShB,EAAa,CAC/B,GAAIuJ,EAAOrF,WAAaxE,EACtB,OAAO,6BACFoD,GADL,IAEE8C,YAAalG,EACbiG,gBAAiB,GACjBwB,oBAAqBrE,EAAMsG,aAI/B,GAAIG,EAAOrF,WAAavE,EACtB,OAAO,6BACFmD,GADL,IAEE8C,YAAajG,EACbgG,gBAAiB4D,EAAOtF,UAAY,GACpCkD,oBAAqBrE,EAAMK,WAAWqH,MACpC,SAAC9F,GAAD,OAAWA,EAAMC,OAAS4E,EAAOtF,YAChClB,OAIP,GAAIwG,EAAOrF,WAAatE,EAAS,CAC/B,IAAM6H,EAAc3E,EAAMO,aAAamH,MACrC,SAACzH,GAAD,OACEA,EAAK+B,QAAQG,SAASnC,EAAMG,OAC5BF,EAAK+B,QAAQG,SAASsE,EAAOtF,aAGjC,OAAO,6BACFnB,GADL,IAEE8C,YAAahG,EACb+F,gBAAiB4D,EAAOtF,SACxBkD,oBAAqBM,EAAY1E,QAKvC,GAAIwG,EAAOvI,OAASf,EAAkB,CACpC,GACE6C,EAAMK,WAAWqH,MACf,SAAC9F,GAAD,OAAWA,EAAMC,KAAKC,gBAAkB2E,EAAOhH,UAAUqC,iBAI3D,OADA8B,MAAM,UAAD,OAAW6C,EAAOhH,UAAlB,qBACEO,EAGT,IAAMqH,EAAoBrH,EAAMK,WAAWqG,OAAO,CAChD7E,KAAM4E,EAAOhH,UACbQ,KAAM,KAIR,OADAqF,aAAaQ,QAAQjJ,EAAQiI,KAAKsB,UAAUiB,IACrC,6BAAKrH,GAAZ,IAAmBK,WAAYgH,IAGjC,GAAIZ,EAAOvI,OAASd,EAAoB,CACtC,GACE4C,EAAMO,aAAamH,MACjB,SAACzH,GAAD,OACEA,EAAK+B,QAAQG,SAASsE,EAAOvG,WAC7BD,EAAK+B,QAAQG,SAASnC,EAAMG,SAGhC,OAAOH,EAET,IAAM2H,EAAkC,CACtC3F,QAAS,CAAChC,EAAMG,KAAMsG,EAAOvG,UAC7BD,KAAM,IAEFkH,EAAsBnH,EAAMO,aAAamG,OAAOiB,GAGtD,OADArC,aAAaQ,QAAQhJ,EAASgI,KAAKsB,UAAUe,IACtC,6BACFnH,GADL,IAEEO,aAAc4G,IAIlB,GAAIV,EAAOvI,OAASb,EAAU,CAC5B,GAAI2C,EAAMQ,YAAY2B,SAASnC,EAAMG,MAAO,OAAOH,EACnD,IAAMsH,EAAqBtH,EAAMQ,YAAYkG,OAAO1G,EAAMG,MAG1D,OADAmF,aAAaQ,QAAQ/I,EAAO+H,KAAKsB,UAAUkB,IACpC,6BAAKtH,GAAZ,IAAmBQ,YAAa8G,IAElC,GAAIb,EAAOvI,OAASZ,EAAa,CAC/B,IAAMgK,EAAqBtH,EAAMQ,YAAYmB,QAC3C,SAACxB,GAAD,OAAUA,IAASH,EAAMG,QAI3B,OADAmF,aAAaQ,QAAQ/I,EAAO+H,KAAKsB,UAAUkB,IACpC,6BAAKtH,GAAZ,IAAmBQ,YAAa8G,IAGlC,GAAIb,EAAOvI,OAASX,EAAiB,CACnC,GAAkC,KAA9BkJ,EAAO/G,YAAYF,OAAe,OAAOQ,EAQ7C,IANA,IAAMoH,EAAoBpH,EAAMsG,WAAWjE,KAAI,SAACc,GAC9C,OAAIA,EAAQK,SAAWxD,EAAMG,KAAagD,EACnC,6BAAKA,GAAZ,IAAqBK,OAAQiD,EAAO/G,iBAGhC2H,EAAiB,aAAOrH,EAAMK,YAC3BuH,EAAI,EAAGA,EAAIP,EAAkBjF,OAAQwF,IAAK,CAIjD,IAHA,IAAMhG,EAAQyF,EAAkBO,GAE1Bf,EAAS,aAAOjF,EAAM3B,MACnB2H,EAAI,EAAGA,EAAIf,EAAUzE,OAAQwF,IAChCf,EAAUe,GAAGpE,SAAWxD,EAAMG,OAChC0G,EAAUe,GAAV,6BAAoBf,EAAUe,IAA9B,IAAkCpE,OAAQiD,EAAO/G,eAGrD2H,EAAkBO,GAAK,CACrB/F,KAAMwF,EAAkBO,GAAG/F,KAC3B5B,KAAM4G,GAKV,IADA,IAAMM,EAAmB,aAAOnH,EAAMO,cAC7BqH,EAAI,EAAGA,EAAIT,EAAoB/E,OAAQwF,IAAK,CACnD,IAAIhG,EAAQuF,EAAoBS,GAE1BC,EAAgC,aAAOjG,EAAMI,SAC/C6F,EAAe,KAAO7H,EAAMG,KAC9B0H,EAAe,GAAKpB,EAAO/G,YACpBmI,EAAe,KAAO7H,EAAMG,OACnC0H,EAAe,GAAKpB,EAAO/G,aAG7B,IADA,IAAMmH,EAAS,aAAOjF,EAAM3B,MACnB2H,EAAI,EAAGA,EAAIf,EAAUzE,OAAQwF,IAChCf,EAAUe,GAAGpE,SAAWxD,EAAMG,OAChC0G,EAAUe,GAAV,6BAAoBf,EAAUe,IAA9B,IAAkCpE,OAAQiD,EAAO/G,eAGrDyH,EAAoBS,GAAK,CAAE5F,QAAS6F,EAAgB5H,KAAM4G,GAG5D,IAAMS,EAAqBtH,EAAMQ,YAAY6B,KAAI,SAAClC,GAAD,OAC/CA,IAASH,EAAMG,KAAOsG,EAAO/G,YAAcS,KAW7C,OARAmF,aAAaQ,QAAQlJ,EAAQkI,KAAKsB,UAAUgB,IAC5C9B,aAAaQ,QAAQjJ,EAAQiI,KAAKsB,UAAUiB,IAC5C/B,aAAaQ,QAAQhJ,EAASgI,KAAKsB,UAAUe,IAC7C7B,aAAaQ,QAAQ/I,EAAO+H,KAAKsB,UAAUkB,IAC3C3B,eAAeG,QAAQ,WAAYW,EAAO/G,aAE1CkE,MAAM,4BAEC,CACLzD,KAAMsG,EAAO/G,YACb4G,WAAYc,EACZ/G,WAAYgH,EACZ9G,aAAc4G,EACd3G,YAAa8G,EACbxE,YAAalG,EACbiG,gBAAiB,GACjBwB,oBAAqB+C,GAIzB,OAAOpH,KCvVI8H,GAAQC,aAAYxB,ICAjCyB,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEF/I,SAASC,eAAe,W","file":"static/js/main.919e9d51.chunk.js","sourcesContent":["import {\r\n  ChatMessageType,\r\n  GroupChatType,\r\n  PrivateChatType,\r\n} from '../../models/models';\r\n\r\nexport const PUBLIC = 'PUBLIC';\r\nexport const GROUPS = 'GROUPS';\r\nexport const PRIVATE = 'PRIVATE';\r\nexport const USERS = 'USERS';\r\nexport type ExistingChatTypes =\r\n  | typeof PUBLIC\r\n  | typeof GROUPS\r\n  | typeof PRIVATE\r\n  | typeof USERS;\r\n\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nexport const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const CHANGE_CHAT = 'CHANGE_CHAT';\r\nexport const CREATE_NEW_GROUP = 'CREATE_NEW_GROUP';\r\nexport const START_PRIVATE_CHAT = 'START_PRIVATE_CHAT';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const REMOVE_USER = 'REMOVE_USER';\r\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\r\n\r\nexport const sendMessage = (message: ChatMessageType) => {\r\n  return { type: SEND_MESSAGE, message };\r\n};\r\n\r\nexport const deleteMessage = (id: string) => {\r\n  return { type: DELETE_MESSAGE, id };\r\n};\r\n\r\nexport const updateChat = (\r\n  type: ExistingChatTypes,\r\n  updatedChat: ChatMessageType[] | GroupChatType[] | PrivateChatType[]\r\n) => {\r\n  return { type: UPDATE_CHAT, chatType: type, updatedChat };\r\n};\r\n\r\nexport const changeChat = (chatType: ExistingChatTypes, chatName: string) => {\r\n  return { type: CHANGE_CHAT, chatType, chatName: chatName };\r\n};\r\n\r\nexport const createNewGroup = (groupName: string) => {\r\n  return { type: CREATE_NEW_GROUP, groupName };\r\n};\r\n\r\nexport const startPrivateChat = (username: string) => {\r\n  return { type: START_PRIVATE_CHAT, username };\r\n};\r\n\r\nexport const addUser = () => {\r\n  return { type: ADD_USER };\r\n};\r\nexport const removeUser = () => {\r\n  return { type: REMOVE_USER };\r\n};\r\n\r\nexport const changeUsername = (newUsername: string) => {\r\n  return { type: CHANGE_USERNAME, newUsername };\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  margin: 5px 0 10px;\r\n  padding: 5px 10px;\r\n  display: block;\r\n`;\r\n\r\ninterface SearchInputProps {\r\n  placeholder: string;\r\n  onUserInput: (input: string) => void;\r\n}\r\n\r\nconst SearchInput = ({ placeholder, onUserInput }: SearchInputProps) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const inputChangeHandler = () => {\r\n    onUserInput(inputRef.current!.value);\r\n  };\r\n\r\n  return (\r\n    <Input\r\n      type='text'\r\n      ref={inputRef}\r\n      onChange={inputChangeHandler}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { Fragment, ReactNode } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Backdrop = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.555);\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 10;\r\n`;\r\nconst ModalOverlay = styled.div`\r\n  background-color: white;\r\n  border-radius: 20px;\r\n  padding: 10px 20px;\r\n  position: fixed;\r\n  top: 45%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 11;\r\n`;\r\n\r\ninterface ModalPropsType {\r\n  children: ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst Modal = ({ children, onClose }: ModalPropsType) => {\r\n  return (\r\n    <Fragment>\r\n      {createPortal(\r\n        <Backdrop onClick={onClose} />,\r\n        document.getElementById('overlays')!\r\n      )}\r\n      {createPortal(\r\n        <ModalOverlay>{children}</ModalOverlay>,\r\n        document.getElementById('overlays')!\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\nimport {\r\n  changeUsername,\r\n  createNewGroup,\r\n} from '../../store/actions/ChatActions';\r\nimport Modal from '../UI/Modal';\r\n\r\nconst Input = styled.input`\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin: 10px 20px;\r\n`;\r\nconst Button = styled.button`\r\n  background-color: #ac0000;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  padding: 8px 20px;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: #c40000;\r\n  }\r\n`;\r\n\r\ninterface ModalInputProps {\r\n  onClose: () => void;\r\n  placeholder: string;\r\n  btnText: string;\r\n  changeType: 'NAME' | 'GROUP';\r\n}\r\n\r\nconst ModalInput = ({\r\n  onClose,\r\n  changeType,\r\n  placeholder,\r\n  btnText,\r\n}: ModalInputProps) => {\r\n  const dispatch = useDispatch();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const addGroupHandler = () => {\r\n    const input = inputRef.current?.value || '';\r\n    if (input.trim() === '') return;\r\n\r\n    if (changeType === 'GROUP') dispatch(createNewGroup(input));\r\n    if (changeType === 'NAME') dispatch(changeUsername(input));\r\n\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal onClose={onClose}>\r\n      <Input ref={inputRef} type='text' placeholder={placeholder} />\r\n      <Button onClick={addGroupHandler}>{btnText}</Button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalInput;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport {\r\n  changeChat,\r\n  ExistingChatTypes,\r\n  startPrivateChat,\r\n} from '../../store/actions/ChatActions';\r\n\r\nimport styled from 'styled-components';\r\nimport SearchInput from './SearchInput';\r\nimport ModalInput from '../modal-input/ModalInput';\r\n\r\nconst StyledChatsList = styled.div`\r\n  background-color: #670d7e;\r\n  color: white;\r\n  width: 350px;\r\n  font-weight: bold;\r\n\r\n  & > h1 {\r\n    display: block;\r\n    margin: 30px 0 20px;\r\n    padding: 0 5px;\r\n    font-size: 20px;\r\n  }\r\n  & > button {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\nconst ChatsSection = styled.div`\r\n  border-top: 2px solid white;\r\n  margin-bottom: 0;\r\n  padding: 15px 5px;\r\n\r\n  h2 {\r\n    font-size: 16px;\r\n    margin: 0;\r\n  }\r\n  & > span {\r\n    font-size: 12px;\r\n    display: block;\r\n    margin: 6px 5px 0;\r\n  }\r\n`;\r\nconst ChatGroup = styled.ul`\r\n  padding: 0 0 0 15px;\r\n  margin: 10px 0;\r\n\r\n  li {\r\n    margin: 5px 0;\r\n    font-size: 15px;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  background-color: black;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  margin-top: 10px;\r\n  padding: 6px 12px;\r\n  display: block;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    background-color: #202020;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ChatsList = () => {\r\n  const {\r\n    user: username,\r\n    chatGroups: reducerChatGroups,\r\n    privateChats: reducerPrivateChats,\r\n    onlineUsers,\r\n  } = useTypedSelector((state) => state.chat);\r\n  const dispatch = useDispatch();\r\n\r\n  const [showNewGroupModal, setShowNewGroupModal] = useState(false);\r\n  const [showNameChangeModal, setShowNameChangeModal] = useState(false);\r\n  const [chatGroupsFilter, setGroupsFilter] = useState('');\r\n  const [privateChatsFilter, setPrivateChatsFilter] = useState('');\r\n\r\n  const changeChatHandler = (type: ExistingChatTypes, chatName: string) => {\r\n    dispatch(changeChat(type, chatName));\r\n  };\r\n\r\n  const startPrivateChatHandler = (username: string) => {\r\n    dispatch(startPrivateChat(username));\r\n  };\r\n\r\n  const searchGroupsHandler = (input: string) => {\r\n    setGroupsFilter(input.toLowerCase());\r\n  };\r\n  const searchPrivateChatHandler = (input: string) => {\r\n    setPrivateChatsFilter(input.toLowerCase());\r\n  };\r\n\r\n  const toggleGroupModalHandler = () => {\r\n    setShowNewGroupModal((prevstate) => !prevstate);\r\n  };\r\n  const toggleNameModalHandler = () => {\r\n    setShowNameChangeModal((prevstate) => !prevstate);\r\n  };\r\n\r\n  const chatGroups = reducerChatGroups.filter((group) =>\r\n    group.name.toLowerCase().startsWith(chatGroupsFilter)\r\n  );\r\n  const privateChats = reducerPrivateChats.filter((chat) => {\r\n    const otherMember =\r\n      chat.members[0] === username ? chat.members[1] : chat.members[0];\r\n    return otherMember.startsWith(privateChatsFilter);\r\n  });\r\n\r\n  const otherOnlineUsers = onlineUsers.filter((user) => user !== username);\r\n  const currentPrivateChats = privateChats.filter((chat) =>\r\n    chat.members.includes(username)\r\n  );\r\n\r\n  return (\r\n    <StyledChatsList>\r\n      <h1>name: {username}</h1>\r\n      <Button onClick={toggleNameModalHandler}>change username</Button>\r\n\r\n      <ChatsSection>\r\n        <h2 onClick={() => changeChatHandler('PUBLIC', '')}>Public</h2>\r\n      </ChatsSection>\r\n\r\n      <ChatsSection>\r\n        <h2>Groups</h2>\r\n        <SearchInput\r\n          placeholder='search group'\r\n          onUserInput={searchGroupsHandler}\r\n        />\r\n\r\n        {chatGroups.length > 0 && (\r\n          <ChatGroup>\r\n            {chatGroups.map((group) => (\r\n              <li\r\n                key={group.name}\r\n                onClick={() => changeChatHandler('GROUPS', group.name)}\r\n              >\r\n                {group.name}\r\n              </li>\r\n            ))}\r\n          </ChatGroup>\r\n        )}\r\n        {chatGroups.length === 0 && <span>No groups found...</span>}\r\n\r\n        <Button onClick={toggleGroupModalHandler}>+ create new group</Button>\r\n      </ChatsSection>\r\n\r\n      <ChatsSection>\r\n        <h2>Private chats</h2>\r\n        <SearchInput\r\n          placeholder='search private chat'\r\n          onUserInput={searchPrivateChatHandler}\r\n        />\r\n\r\n        {currentPrivateChats.length > 0 && (\r\n          <ChatGroup>\r\n            {currentPrivateChats.map((group) => (\r\n              <li\r\n                key={group.members.toString()}\r\n                onClick={() =>\r\n                  changeChatHandler(\r\n                    'PRIVATE',\r\n                    group.members[0] !== username\r\n                      ? group.members[0]\r\n                      : group.members[1]\r\n                  )\r\n                }\r\n              >\r\n                {group.members[0] !== username\r\n                  ? group.members[0]\r\n                  : group.members[1]}\r\n              </li>\r\n            ))}\r\n          </ChatGroup>\r\n        )}\r\n        {currentPrivateChats.length === 0 && (\r\n          <span>No private conversations found</span>\r\n        )}\r\n      </ChatsSection>\r\n\r\n      <ChatsSection>\r\n        <h2>Online users:</h2>\r\n        {otherOnlineUsers.length > 0 && (\r\n          <ul>\r\n            {otherOnlineUsers.map((user) => (\r\n              <li\r\n                key={`id_${user}`}\r\n                onClick={() => startPrivateChatHandler(user)}\r\n              >\r\n                {user}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        {otherOnlineUsers.length === 0 && <span>No other user online</span>}\r\n      </ChatsSection>\r\n\r\n      {showNewGroupModal && (\r\n        <ModalInput\r\n          changeType='GROUP'\r\n          onClose={toggleGroupModalHandler}\r\n          placeholder='Enter a new group name'\r\n          btnText='create group'\r\n        />\r\n      )}\r\n      {showNameChangeModal && (\r\n        <ModalInput\r\n          changeType='NAME'\r\n          onClose={toggleNameModalHandler}\r\n          placeholder='Enter a new username'\r\n          btnText='change username'\r\n        />\r\n      )}\r\n    </StyledChatsList>\r\n  );\r\n};\r\n\r\nexport default ChatsList;\r\n","import { FormEventHandler, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport { sendMessage } from '../../store/actions/ChatActions';\r\nimport styled from 'styled-components';\r\n\r\nconst Form = styled.form`\r\n  background-color: #dddddd;\r\n  height: 20%;\r\n  text-align: center;\r\n  position: relative;\r\n`;\r\nconst Input = styled.textarea`\r\n  border: 2px solid black;\r\n  border-radius: 20px;\r\n  width: 80%;\r\n  margin-top: 26px;\r\n  padding: 10px;\r\n  resize: none;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  background-color: purple;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 50px;\r\n  padding: 8px 35px;\r\n  font-weight: bold;\r\n  font-size: 15px;\r\n  position: absolute;\r\n  top: 88px;\r\n  right: 10%;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #970097;\r\n  }\r\n`;\r\nconst ChatName = styled.span`\r\n  position: absolute;\r\n  top: -30px;\r\n  left: 10px;\r\n  font-weight: bold;\r\n  z-index: 5;\r\n`;\r\n\r\nconst ChatInput = () => {\r\n  const {\r\n    user,\r\n    currentChatName: chatName,\r\n    currentChat,\r\n  } = useTypedSelector((state) => state.chat);\r\n  const dispatch = useDispatch();\r\n  const userInputRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const submitFormHandler: FormEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const input = userInputRef.current?.value;\r\n\r\n    if (!input || input.trim().length === 0) {\r\n      alert('message must not be empty');\r\n      return;\r\n    }\r\n\r\n    const timestamp = new Date();\r\n    dispatch(\r\n      sendMessage({\r\n        id: timestamp.getTime() + user,\r\n        author: user,\r\n        date: timestamp.toLocaleTimeString(),\r\n        text: input,\r\n      })\r\n    );\r\n    userInputRef.current.value = '';\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={submitFormHandler}>\r\n      <Input ref={userInputRef} placeholder='Send a message' />\r\n      <Button type='submit'>Send</Button>\r\n\r\n      <ChatName>\r\n        {currentChat}\r\n        {chatName ? `: ${chatName}` : ''}\r\n      </ChatName>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n","import { useTypedSelector } from '../../hooks/useTypedSelector';\r\nimport styled from 'styled-components';\r\n\r\ninterface MessageProps {\r\n  readonly author: boolean;\r\n}\r\n\r\nconst ChatContanier = styled.section`\r\n  border: 2px solid black;\r\n  height: 80%;\r\n  padding: 0 15px;\r\n  position: relative;\r\n  flex-grow: 1;\r\n  overflow: auto;\r\n\r\n  p {\r\n    margin: 0;\r\n    padding: 0;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst MessageBubble = styled.li<MessageProps>`\r\n  width: 100%;\r\n  margin: 13px 0 43px;\r\n  padding: 0 5px;\r\n  text-align: ${(props) => (props.author ? 'right' : 'left')};\r\n  position: relative;\r\n\r\n  & > span {\r\n    padding: 7px 15px;\r\n    border: 1px solid black;\r\n    border-radius: 15px;\r\n    font-size: 14px;\r\n  }\r\n`;\r\nconst MessageInfo = styled.span<MessageProps>`\r\n  display: block;\r\n  width: 100%;\r\n  width: auto;\r\n  margin-left: 5px;\r\n  font-size: 13px;\r\n  position: absolute;\r\n  top: 27px;\r\n  right: ${(props) => (props.author ? '5px' : 'auto')};\r\n`;\r\n\r\nconst MessagesList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style-type: none;\r\n`;\r\n\r\nconst MainChat = () => {\r\n  const chat = useTypedSelector((state) => state.chat.currentChatMessages);\r\n  const username = useTypedSelector((state) => state.chat.user);\r\n\r\n  return (\r\n    <ChatContanier>\r\n      {chat.length > 0 && (\r\n        <MessagesList>\r\n          {chat.map((message) => (\r\n            <MessageBubble\r\n              author={message.author === username}\r\n              key={message.id}\r\n            >\r\n              <span>\r\n                {message.text}\r\n                <MessageInfo author={message.author === username}>\r\n                  {message.author === username ? 'you' : message.author} -{' '}\r\n                  {message.date}\r\n                </MessageInfo>\r\n              </span>\r\n            </MessageBubble>\r\n          ))}\r\n        </MessagesList>\r\n      )}\r\n\r\n      {chat.length === 0 && <p>No messages yet, start a conversation!</p>}\r\n    </ChatContanier>\r\n  );\r\n};\r\n\r\nexport default MainChat;\r\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addUser, removeUser, updateChat } from './store/actions/ChatActions';\n\nimport styled from 'styled-components';\nimport ChatsList from './components/chats-list/ChatsList';\nimport ChatInput from './components/main-chat/ChatInput';\nimport MainChat from './components/main-chat/MainChat';\n\nconst LayoutContainer = styled.div`\n  display: flex;\n  height: 100vh;\n`;\nconst ChatContainer = styled.div`\n  flex-grow: 1;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(addUser());\n\n    const storageChangeHandler = (e: any) => {\n      const newValue = e.newValue;\n      dispatch(updateChat(e.key!, newValue ? JSON.parse(newValue) : []));\n    };\n    const removeUsernameHandler = (e: BeforeUnloadEvent) => {\n      e.preventDefault();\n      dispatch(removeUser());\n    };\n\n    window.addEventListener('storage', storageChangeHandler);\n    window.addEventListener('beforeunload', removeUsernameHandler);\n\n    return () => {\n      window.removeEventListener('storage', storageChangeHandler);\n      window.removeEventListener('beforeunload', removeUsernameHandler);\n    };\n  }, [dispatch]);\n\n  return (\n    <LayoutContainer>\n      <ChatsList />\n\n      <ChatContainer>\n        <MainChat />\n        <ChatInput />\n      </ChatContainer>\n    </LayoutContainer>\n  );\n}\n\nexport default App;\n","export const getStorageItem = (key: string): any[] => {\r\n  const item = localStorage.getItem(key);\r\n  return item ? JSON.parse(item) : [];\r\n};\r\n","import {\r\n  ChatsListType,\r\n  GroupChatType,\r\n  PrivateChatType,\r\n} from '../../models/models';\r\nimport {\r\n  ADD_USER,\r\n  CHANGE_CHAT,\r\n  CHANGE_USERNAME,\r\n  CREATE_NEW_GROUP,\r\n  DELETE_MESSAGE,\r\n  ExistingChatTypes,\r\n  GROUPS,\r\n  PRIVATE,\r\n  PUBLIC,\r\n  REMOVE_USER,\r\n  SEND_MESSAGE,\r\n  START_PRIVATE_CHAT,\r\n  UPDATE_CHAT,\r\n  USERS,\r\n} from '../actions/ChatActions';\r\nimport { ChatMessageType } from '../../models/models';\r\nimport { getStorageItem } from '../../helpers/helpers';\r\n\r\ninterface ChatReducerType extends ChatsListType {\r\n  user: string;\r\n  currentChat: string;\r\n  currentChatName: string;\r\n  currentChatMessages: ChatMessageType[];\r\n  onlineUsers: string[];\r\n}\r\ntype ActionType =\r\n  | { type: typeof SEND_MESSAGE; message: ChatMessageType }\r\n  | { type: typeof DELETE_MESSAGE; id: string }\r\n  | {\r\n      type: typeof UPDATE_CHAT;\r\n      chatType: ExistingChatTypes;\r\n      updatedChat: any[];\r\n    }\r\n  | { type: typeof CHANGE_CHAT; chatType: ExistingChatTypes; chatName: string }\r\n  | { type: typeof CREATE_NEW_GROUP; groupName: string }\r\n  | { type: typeof START_PRIVATE_CHAT; username: string }\r\n  | { type: typeof ADD_USER }\r\n  | { type: typeof REMOVE_USER }\r\n  | { type: typeof CHANGE_USERNAME; newUsername: string };\r\n\r\n// GETS USERNAME OR CREATES IT AND SAVES IT (sessionStorage)\r\nconst rug = require('random-username-generator');\r\nconst existingUsername = sessionStorage.getItem('username');\r\nlet randomUsername = existingUsername;\r\nif (!existingUsername) {\r\n  randomUsername = rug.generate();\r\n  sessionStorage.setItem('username', randomUsername!);\r\n}\r\n\r\n// GETS STORAGE CHATS AND CREATES DEFAULT GROUPS IF NECESSARY\r\nconst storagePublicChat = getStorageItem(PUBLIC);\r\nconst storageChatGroups = getStorageItem(GROUPS);\r\nconst storagePrivateChats = getStorageItem(PRIVATE);\r\nconst storageOnlineUsers = getStorageItem(USERS);\r\n\r\nconst initialChatGroups: GroupChatType[] = [\r\n  { name: 'Group-1', chat: [] },\r\n  { name: 'Group-2', chat: [] },\r\n  { name: 'Group-3', chat: [] },\r\n];\r\nif (storageChatGroups.length === 0) {\r\n  localStorage.setItem(GROUPS, JSON.stringify(initialChatGroups));\r\n}\r\n\r\n// REDUCER\r\nconst initialState: ChatReducerType = {\r\n  user: randomUsername!,\r\n  currentChat: PUBLIC,\r\n  currentChatName: '',\r\n  publicChat: storagePublicChat,\r\n  chatGroups:\r\n    storageChatGroups.length > 0 ? storageChatGroups : initialChatGroups,\r\n  privateChats: storagePrivateChats,\r\n  currentChatMessages: storagePublicChat,\r\n  onlineUsers: storageOnlineUsers,\r\n};\r\n\r\nexport const ChatReducer = (\r\n  state = initialState,\r\n  action: ActionType\r\n): ChatReducerType => {\r\n  if (action.type === SEND_MESSAGE) {\r\n    if (state.currentChat === PUBLIC) {\r\n      const updatedChat = state.publicChat.concat(action.message);\r\n      localStorage.setItem(PUBLIC, JSON.stringify(updatedChat));\r\n\r\n      return {\r\n        ...state,\r\n        publicChat: updatedChat,\r\n        currentChatMessages: updatedChat,\r\n      };\r\n    }\r\n\r\n    if (state.currentChat === GROUPS) {\r\n      const groupChatIndex = state.chatGroups.findIndex(\r\n        (group) => group.name === state.currentChatName\r\n      );\r\n      const groupChat = state.chatGroups[groupChatIndex];\r\n\r\n      const updatedChat = groupChat.chat.concat(action.message);\r\n      const updatedGroupChat = { ...groupChat, chat: updatedChat };\r\n      const updatedGroups = [...state.chatGroups];\r\n      updatedGroups[groupChatIndex] = updatedGroupChat;\r\n\r\n      localStorage.setItem(GROUPS, JSON.stringify(updatedGroups));\r\n\r\n      return {\r\n        ...state,\r\n        chatGroups: updatedGroups,\r\n        currentChatMessages: updatedGroupChat.chat,\r\n      };\r\n    }\r\n\r\n    if (state.currentChat === PRIVATE) {\r\n      const chatIndex = state.privateChats.findIndex(\r\n        (group) =>\r\n          group.members.includes(state.currentChatName) &&\r\n          group.members.includes(state.user)\r\n      );\r\n      const privateChat = state.privateChats[chatIndex];\r\n\r\n      const updatedChat = privateChat.chat.concat(action.message);\r\n      const updatedPrivateChat = { ...privateChat, chat: updatedChat };\r\n      const updatedPrivateChats = [...state.privateChats];\r\n      updatedPrivateChats[chatIndex] = updatedPrivateChat;\r\n\r\n      localStorage.setItem(PRIVATE, JSON.stringify(updatedPrivateChats));\r\n\r\n      return {\r\n        ...state,\r\n        privateChats: updatedPrivateChats,\r\n        currentChatMessages: updatedPrivateChat.chat,\r\n      };\r\n    }\r\n  }\r\n\r\n  if (action.type === UPDATE_CHAT) {\r\n    const updatedPublicChat =\r\n      action.chatType === PUBLIC ? action.updatedChat : state.publicChat;\r\n    const updatedChatGroups =\r\n      action.chatType === GROUPS ? action.updatedChat : state.chatGroups;\r\n    const updatedPrivateChats =\r\n      action.chatType === PRIVATE ? action.updatedChat : state.privateChats;\r\n    const updatedOnlineUsers =\r\n      action.chatType === USERS ? action.updatedChat : state.onlineUsers;\r\n\r\n    let nameChanged = false;\r\n    let updatedCurrentChat = state.currentChatMessages;\r\n    if (state.currentChat === PUBLIC) {\r\n      updatedCurrentChat = updatedPublicChat;\r\n    } else if (state.currentChat === GROUPS) {\r\n      const existingChatIndex = updatedChatGroups.findIndex(\r\n        (chat) => chat.name === state.currentChatName\r\n      );\r\n      updatedCurrentChat = updatedChatGroups[existingChatIndex].chat;\r\n    } else if (state.currentChat === PRIVATE) {\r\n      const existingChatIndex = updatedPrivateChats.findIndex(\r\n        (chat) =>\r\n          chat.members.includes(state.currentChatName) &&\r\n          chat.members.includes(state.user)\r\n      );\r\n      if (existingChatIndex !== -1)\r\n        updatedCurrentChat = updatedPrivateChats[existingChatIndex].chat;\r\n      else {\r\n        nameChanged = true;\r\n        updatedCurrentChat = updatedPublicChat;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      currentChat: nameChanged ? PUBLIC : state.currentChat,\r\n      currentChatName: nameChanged ? '' : state.currentChatName,\r\n      publicChat: updatedPublicChat,\r\n      chatGroups: updatedChatGroups,\r\n      privateChats: updatedPrivateChats,\r\n      currentChatMessages: updatedCurrentChat,\r\n      onlineUsers: updatedOnlineUsers,\r\n    };\r\n  }\r\n\r\n  if (action.type === CHANGE_CHAT) {\r\n    if (action.chatType === PUBLIC) {\r\n      return {\r\n        ...state,\r\n        currentChat: PUBLIC,\r\n        currentChatName: '',\r\n        currentChatMessages: state.publicChat,\r\n      };\r\n    }\r\n\r\n    if (action.chatType === GROUPS) {\r\n      return {\r\n        ...state,\r\n        currentChat: GROUPS,\r\n        currentChatName: action.chatName || '',\r\n        currentChatMessages: state.chatGroups.find(\r\n          (group) => group.name === action.chatName\r\n        )!.chat,\r\n      };\r\n    }\r\n\r\n    if (action.chatType === PRIVATE) {\r\n      const updatedChat = state.privateChats.find(\r\n        (chat) =>\r\n          chat.members.includes(state.user) &&\r\n          chat.members.includes(action.chatName)\r\n      )!;\r\n\r\n      return {\r\n        ...state,\r\n        currentChat: PRIVATE,\r\n        currentChatName: action.chatName,\r\n        currentChatMessages: updatedChat.chat,\r\n      };\r\n    }\r\n  }\r\n\r\n  if (action.type === CREATE_NEW_GROUP) {\r\n    if (\r\n      state.chatGroups.find(\r\n        (group) => group.name.toLowerCase() === action.groupName.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`Group '${action.groupName}' already exists`);\r\n      return state;\r\n    }\r\n\r\n    const updatedChatGroups = state.chatGroups.concat({\r\n      name: action.groupName,\r\n      chat: [],\r\n    });\r\n\r\n    localStorage.setItem(GROUPS, JSON.stringify(updatedChatGroups));\r\n    return { ...state, chatGroups: updatedChatGroups };\r\n  }\r\n\r\n  if (action.type === START_PRIVATE_CHAT) {\r\n    if (\r\n      state.privateChats.find(\r\n        (chat) =>\r\n          chat.members.includes(action.username) &&\r\n          chat.members.includes(state.user)\r\n      )\r\n    )\r\n      return state;\r\n\r\n    const newPrivateChat: PrivateChatType = {\r\n      members: [state.user, action.username],\r\n      chat: [],\r\n    };\r\n    const updatedPrivateChats = state.privateChats.concat(newPrivateChat);\r\n\r\n    localStorage.setItem(PRIVATE, JSON.stringify(updatedPrivateChats));\r\n    return {\r\n      ...state,\r\n      privateChats: updatedPrivateChats,\r\n    };\r\n  }\r\n\r\n  if (action.type === ADD_USER) {\r\n    if (state.onlineUsers.includes(state.user)) return state;\r\n    const updatedOnlineUsers = state.onlineUsers.concat(state.user);\r\n\r\n    localStorage.setItem(USERS, JSON.stringify(updatedOnlineUsers));\r\n    return { ...state, onlineUsers: updatedOnlineUsers };\r\n  }\r\n  if (action.type === REMOVE_USER) {\r\n    const updatedOnlineUsers = state.onlineUsers.filter(\r\n      (user) => user !== state.user\r\n    );\r\n\r\n    localStorage.setItem(USERS, JSON.stringify(updatedOnlineUsers));\r\n    return { ...state, onlineUsers: updatedOnlineUsers };\r\n  }\r\n\r\n  if (action.type === CHANGE_USERNAME) {\r\n    if (action.newUsername.trim() === '') return state;\r\n\r\n    const updatedPublicChat = state.publicChat.map((message) => {\r\n      if (message.author !== state.user) return message;\r\n      return { ...message, author: action.newUsername };\r\n    });\r\n\r\n    const updatedChatGroups = [...state.chatGroups];\r\n    for (let i = 0; i < updatedChatGroups.length; i++) {\r\n      const group = updatedChatGroups[i];\r\n\r\n      const groupChat = [...group.chat];\r\n      for (let i = 0; i < groupChat.length; i++) {\r\n        if (groupChat[i].author === state.user)\r\n          groupChat[i] = { ...groupChat[i], author: action.newUsername };\r\n      }\r\n\r\n      updatedChatGroups[i] = {\r\n        name: updatedChatGroups[i].name,\r\n        chat: groupChat,\r\n      };\r\n    }\r\n\r\n    const updatedPrivateChats = [...state.privateChats];\r\n    for (let i = 0; i < updatedPrivateChats.length; i++) {\r\n      let group = updatedPrivateChats[i];\r\n\r\n      const updatedMembers: [string, string] = [...group.members];\r\n      if (updatedMembers[0] === state.user)\r\n        updatedMembers[0] = action.newUsername;\r\n      else if (updatedMembers[1] === state.user)\r\n        updatedMembers[1] = action.newUsername;\r\n\r\n      const groupChat = [...group.chat];\r\n      for (let i = 0; i < groupChat.length; i++) {\r\n        if (groupChat[i].author === state.user)\r\n          groupChat[i] = { ...groupChat[i], author: action.newUsername };\r\n      }\r\n\r\n      updatedPrivateChats[i] = { members: updatedMembers, chat: groupChat };\r\n    }\r\n\r\n    const updatedOnlineUsers = state.onlineUsers.map((user) =>\r\n      user === state.user ? action.newUsername : user\r\n    );\r\n\r\n    localStorage.setItem(PUBLIC, JSON.stringify(updatedPublicChat));\r\n    localStorage.setItem(GROUPS, JSON.stringify(updatedChatGroups));\r\n    localStorage.setItem(PRIVATE, JSON.stringify(updatedPrivateChats));\r\n    localStorage.setItem(USERS, JSON.stringify(updatedOnlineUsers));\r\n    sessionStorage.setItem('username', action.newUsername);\r\n\r\n    alert('name changed succesfully');\r\n\r\n    return {\r\n      user: action.newUsername,\r\n      publicChat: updatedPublicChat,\r\n      chatGroups: updatedChatGroups,\r\n      privateChats: updatedPrivateChats,\r\n      onlineUsers: updatedOnlineUsers,\r\n      currentChat: PUBLIC,\r\n      currentChatName: '',\r\n      currentChatMessages: updatedPublicChat,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { ChatReducer } from './reducers/ChatReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  chat: ChatReducer,\r\n});\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}